name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      BASE_URL: ${{ secrets.BASE_URL }}
      API_LOGIN_URL: ${{ secrets.API_LOGIN_URL }}
      API_EMAIL: ${{ secrets.API_EMAIL }}
      API_PASSWORD: ${{ secrets.API_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest  # Instala o plugin do Allure para pytest

      - name: Install Allure CLI
        run: |
          # Baixando e instalando o Allure CLI
          curl -o allure-commandline.zip -L https://github.com/allure-framework/allure2/releases/download/2.18.1/allure-2.18.1.zip
          unzip allure-commandline.zip -d /opt/allure
          ln -s /opt/allure/allure-2.18.1/bin/allure /usr/local/bin/allure
          allure --version  # Verifica se o Allure foi instalado corretamente

      - name: Run tests
        run: |
          pytest --maxfail=3 --disable-warnings --alluredir=allure-results
          # Verificar se o diretório allure-results foi criado e não está vazio
          if [ -d allure-results ] && [ "$(ls -A allure-results)" ]; then
            echo "Resultados dos testes gerados com sucesso!"
          else
            echo "Erro: allure-results está vazio ou não foi criado!"
            exit 1
          fi

      - name: Generate Allure Report
        if: always()
        run: |
          # Verificar se o diretório allure-results contém arquivos
          if [ -d allure-results ] && [ "$(ls -A allure-results)" ]; then
            echo "Gerando o relatório Allure..."
            allure generate allure-results --clean -o allure-report
            # Verificar se o diretório allure-report foi criado
            if [ -d allure-report ] && [ "$(ls -A allure-report)" ]; then
              echo "Relatório Allure gerado com sucesso!"
            else
              echo "Erro: allure-report não foi criado ou está vazio!"
              exit 1
            fi
          else
            echo "Erro: allure-results está vazio ou não foi criado!"
            exit 1
          fi

      - name: Criar o branch gh-pages se não existir
        if: always()
        run: |
          # Salvar o relatório em um diretório temporário antes do checkout
          if [ -d allure-report ]; then
            mkdir -p /tmp/allure-report
            cp -r allure-report/* /tmp/allure-report/
          fi

          # Buscar e criar o branch gh-pages caso não exista
          git fetch origin gh-pages || (git checkout --orphan gh-pages && git rm -rf .)

          # Restaurar o relatório do diretório temporário
          if [ -d /tmp/allure-report ]; then
            cp -r /tmp/allure-report/* .
          fi

          # Configurar Git e fazer commit
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Update Allure Report"
          git push origin gh-pages