name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Executa todos os dias à meia-noite (UTC)

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      BASE_URL: ${{ secrets.BASE_URL }}
      API_LOGIN_URL: ${{ secrets.API_LOGIN_URL }}
      API_EMAIL: ${{ secrets.API_EMAIL }}
      API_PASSWORD: ${{ secrets.API_PASSWORD }}

    steps:
      # Passo 1: Checkout do código
      - name: Checkout code
        uses: actions/checkout@v4

      # Passo 2: Verificar variável BASE_URL
      - name: Verificar variável BASE_URL
        run: |
          if [ -z "$BASE_URL" ]; then
            echo "❌ Erro: BASE_URL não está definida!"
            exit 1
          else
            echo "✅ BASE_URL encontrada!"
          fi

      # Passo 3: Verificar localização do pytest.ini
      - name: Verificar localização do pytest.ini
        run: |
          if [ -f pytest.ini ]; then
            echo "✅ pytest.ini encontrado na raiz do projeto!"
          else
            echo "❌ pytest.ini NÃO foi encontrado na raiz do projeto!"
            exit 1
          fi

      # Passo 4: Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Passo 5: Cache para dependências do Python
      - name: Cache Python dependencies
        id: pip-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      # Passo 6: Instalar dependências
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest

      # Passo 7: Cache para Allure CLI
      - name: Cache Allure CLI
        id: allure-cache
        uses: actions/cache@v3
        with:
          path: /opt/allure-2.18.1
          key: allure-${{ runner.os }}-2.18.1
          restore-keys: |
            allure-${{ runner.os }}-

      # Passo 8: Instalar Allure CLI (se não estiver em cache)
      - name: Install Allure CLI
        if: steps.allure-cache.outputs.cache-hit != 'true'
        run: |
          curl -Lo allure-2.18.1.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.18.1/allure-commandline-2.18.1.tgz"
          sudo tar -zxvf allure-2.18.1.tgz -C /opt/
          sudo ln -s /opt/allure-2.18.1/bin/allure /usr/local/bin/allure
          echo "/opt/allure-2.18.1/bin" >> $GITHUB_PATH
          allure --version

      # Passo 9: Rodar os testes
      - name: Run tests
        run: |
          pytest --maxfail=3 --disable-warnings --alluredir=allure-results
          if [ -d allure-results ] && [ "$(ls -A allure-results)" ]; then
            echo "✅ Resultados dos testes gerados com sucesso!"
          else
            echo "❌ Erro: allure-results está vazio ou não foi criado!"
            exit 1
          fi

      # Passo 10: Carregar histórico de relatórios
      - name: Load test report history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # Passo 11: Gerar relatório Allure
      - name: Generate Allure Report
        if: always()
        run: |
          allure generate allure-results --clean -o allure-report --history-dir gh-pages
          if [ -d allure-report ] && [ "$(ls -A allure-report)" ]; then
            echo "✅ Relatório Allure gerado com sucesso!"
          else
            echo "❌ Erro: allure-report não foi criado ou está vazio!"
            exit 1
          fi

      # Passo 12: Configurar Git
      - name: Configurar Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Passo 13: Publicar relatório no GitHub Pages
      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report